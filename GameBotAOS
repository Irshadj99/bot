-- Initializing global variables to store the latest game state and game host process.
LatestGameState = LatestGameState or nil
InAction = InAction or false -- Prevents the agent from taking multiple actions at once.
Logs = Logs or {}

colors = {
    red = "\27[31m",
    green = "\27[32m",
    blue = "\27[34m",
    reset = "\27[0m",
    gray = "\27[90m"
}

function addLog(msg, text) -- Function definition commented for performance, can be used for debugging
    Logs[msg] = Logs[msg] or {}
    table.insert(Logs[msg], text)
end


function inRange(x1, y1, x2, y2, range)
    return math.abs(x1 - x2) <= range and math.abs(y1 - y2) <= range
end

function findClosestPlayer()
    local me = LatestGameState.Players[ao.id]

    local ClosestPlayer = nil
    local ClosestDistance = nil

    for target, state in pairs(LatestGameState.Players) do
        if target == ao.id then
            goto continue
        end

        local other = state;
        local xdiff = me.x - other.x
        local ydiff = me.y - other.y
        local distance = math.sqrt(xdiff * xdiff + ydiff * ydiff)

        if ClosestPlayer == nil or ClosestDistance > distance then
            ClosestPlayer = other
            ClosestDistance = distance
        end

        ::continue::
    end

    return ClosestPlayer
end

directionMap = {}
directionMap[{ x = 0, y = 1 }] = "Up"
directionMap[{ x = 0, y = -1 }] = "Down"
directionMap[{ x = -1, y = 0 }] = "Left"
directionMap[{ x = 1, y = 0 }] = "Right"
directionMap[{ x = 1, y = 1 }] = "UpRight"
directionMap[{ x = -1, y = 1 }] = "UpLeft"
directionMap[{ x = 1, y = -1 }] = "DownRight"
directionMap[{ x = -1, y = -1 }] = "DownLeft"

function findGoDefensive()
    local me = LatestGameState.Players[ao.id]

    local GoDefensive = { x = 0, y = 0 }
    for target, state in pairs(LatestGameState.Players) do
        if target == ao.id then
            goto continue
        end

        local otherPlayer = state
        local DefensiveVector = { x = me.x - otherPlayer.x, y = me.y - otherPlayer.y }
        GoDefensive.x = GoDefensive.x + DefensiveVector.x
        GoDefensive.y = GoDefensive.y + DefensiveVector.y

        ::continue::
    end
    GoDefensive = PragmaticDirection(GoDefensive)

    local closestDirection = nil
    local closestDotResult = nil

    for direction, name in pairs(directionMap) do
        local normalized = PragmaticDirection(direction)
        local dotResult = GoDefensive.x * normalized.x + GoDefensive.y * normalized.y

        if closestDirection == nil or closestDotResult < dotResult then
            closestDirection = name
            closestDotResult = dotResult
        end
    end

    return closestDirection
end

function findAttackAngle()
    local me = LatestGameState.Players[ao.id]

    local AttackAngle = { x = 0, y = 0 }
    local otherPlayer = findClosestPlayer()
    local AttackVector = { x = otherPlayer.x - me.x, y = otherPlayer.y - me.y }
    AttackAngle.x = AttackAngle.x + AttackVector.x
    AttackAngle.y = AttackAngle.y + AttackVector.y
    AttackAngle = PragmaticDirection(AttackAngle)

    local closestDirection = nil
    local closestDotResult = nil

    for direction, name in pairs(directionMap) do
        local normalized = PragmaticDirection(direction)
        local dotResult = AttackAngle.x * normalized.x + AttackAngle.y * normalized.y

        if closestDirection == nil or closestDotResult < dotResult then
            closestDirection = name
            closestDotResult = dotResult
        end
    end

    return closestDirection
end

function inRange(player)
    local me = LatestGameState.Players[ao.id]

    if inRange(me.x, me.y, player.x, player.y, 1) then
        return true;
    end

    return false;
end

function PragmaticDirection(direction)
    local length = math.sqrt(direction.x * direction.x + direction.y * direction.y)
    return { x = direction.x / length, y = direction.y / length }
end

-- Decides the next action based on player proximity and Power.
-- If any player is within range, it initiates an attack; otherwise, moves randomly.
function decideNextAction()
    local me = LatestGameState.Players[ao.id]

    local ClosestPlayer = findClosestPlayer()
    local isClosestPlayerinRange = inRange(ClosestPlayer)

    ClosestPlayer.isinRange = isClosestPlayerinRange;
    ClosestPlayer.meEnergy = me.Power

    -- Determine if there's an opponent in attack range and their relative Power level
    local GoOffensive = false
    local Force = 1.0
    if ClosestPlayer.isinRange then
        local EnemyPower = ClosestPlayer.Power
        if EnemyPower < 20 or (EnemyPower < me.Power and EnemyPower < 50) then
            GoOffensive = true
            if EnemyPower < 20 then
                Force = 0.5 -- 50% Power if opponent Power < 20
            elseif EnemyPower >= 20 and EnemyPower < 50 then
                Force = 0.7 -- 70% Power if opponent Power < 50 and weaker than our bot
            end
        elseif EnemyPower >= me.Power then
            -- Go Defensive
            local GoDefensive = findGoDefensive()
            print(colors.blue .. "Moving away from stronger opponent." .. colors.reset)
            ao.send({ Target = Game, Action = "PlayerMove", Player = ao.id, Direction = GoDefensive })
            InAction = false -- Reset InAction after moving
            return -- Exit function early
        end
    end

    if not GoOffensive then
        -- Find attack angle if no immediate threat
        local AttackAngle = findApproachDirection()
        print(colors.blue .. "Going Offensive. Attacking." .. colors.reset)
        ao.send({ Target = Game, Action = "PlayerMove", Player = ao.id, Direction = AttackAngle })
        InAction = false -- Reset InAction after moving
    else
        -- Attack with calculated power
        print(colors.red .. "Attacking with " .. (Force * 100) .. "% power." .. colors.reset)
        ao.send({ Target = Game, Action = "PlayerAttack", Player = ao.id, AttackEnergy = tostring(me.Power * Force) })
        InAction = false -- Reset InAction after attacking
    end
end

-- Handler to print game announcements and trigger game state updates.
Handlers.add(
    "PrintAnnouncements",
    Handlers.utils.hasMatchingTag("Action", "Announcement"),
    function(msg)
        if msg.Event == "Started-Waiting-Period" then
            ao.send({ Target = ao.id, Action = "AutoPay" })
        elseif (msg.Event == "Tick" or msg.Event == "Started-Game") and not InAction then
            InAction = true  -- InAction logic added
            ao.send({ Target = Game, Action = "GetGameState" })
        elseif InAction then -- InAction logic added
            print("Previous action still in progress. Skipping.")
        end

        print(colors.green .. msg.Event .. ": " .. msg.Data .. colors.reset)
    end
)

-- Handler to trigger game state updates.
Handlers.add(
    "GetGameStateOnTick",
    Handlers.utils.hasMatchingTag("Action", "Tick"),
    function()
        if not InAction then -- InAction logic added
            InAction = true  -- InAction logic added
            print(colors.gray .. "Getting game state..." .. colors.reset)
            ao.send({ Target = Game, Action = "GetGameState" })
        else
            print("Previous action still in progress. Skipping.")
        end
    end
)

-- Handler to automate payment confirmation when waiting period starts.
Handlers.add(
    "AutoPay",
    Handlers.utils.hasMatchingTag("Action", "AutoPay"),
    function(msg)
        print("Auto-paying confirmation fees.")
        ao.send({ Target = Game, Action = "Transfer", Recipient = Game, Quantity = "1000" })
    end
)

-- Handler to update the game state upon receiving game state information.
Handlers.add(
    "UpdateGameState",
    Handlers.utils.hasMatchingTag("Action", "GameState"),
    function(msg)
        local json = require("json")
        LatestGameState = json.decode(msg.Data)
        ao.send({ Target = ao.id, Action = "UpdatedGameState" })
        print("Game state updated. Print \'LatestGameState\' for detailed view.")
        print("Power:" .. LatestGameState.Players[ao.id].Power)
    end
)

-- Handler to decide the next best action.
Handlers.add(
    "decideNextAction",
    Handlers.utils.hasMatchingTag("Action", "UpdatedGameState"),
    function()
        if LatestGameState.GameMode ~= "Playing" then
            print("game not start")
            InAction = false -- InAction logic added
            return
        end
        print("Deciding next action.")
        decideNextAction()
        ao.send({ Target = ao.id, Action = "Tick" })
    end
)

-- Handler to automatically attack when hit by another player.
Handlers.add(
    "ReturnAttack",
    Handlers.utils.hasMatchingTag("Action", "Hit"),
    function(msg)
        if not InAction then -- InAction logic added
            InAction = true  -- InAction logic added
            local playerEnergy = LatestGameState.Players[ao.id].Power
            if playerEnergy == undefined then
                print(colors.red .. "Unable to read Power." .. colors.reset)
                ao.send({ Target = Game, Action = "Attack-Failed", Reason = "Unable to read Power." })
            elseif playerEnergy == 0 then
                print(colors.red .. "Player has insufficient Power." .. colors.reset)
                ao.send({ Target = Game, Action = "Attack-Failed", Reason = "Player has no Power." })
            else
                print(colors.red .. "Returning attack." .. colors.reset)
                ao.send({ Target = Game, Action = "PlayerAttack", Player = ao.id, AttackEnergy = tostring(playerEnergy) })
            end
            InAction = false -- InAction logic added
            ao.send({ Target = ao.id, Action = "Tick" })
        else
            print("Previous action still in progress. Skipping.")
        end
    end
)
